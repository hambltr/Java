연산자(operation) 종류

	산술연산자
	관계연산자
	논리연산자
	shift연산자(bit연산 = 이진 연산)
	boolean연산
===========================

산술연산자

	+ , - , * , / , '%(모듈러, 나머지를 남기는 연산)'
	
	정수/정수 = 몫
	정수/실수 = 실수값 발생 (자동 형변환, int >> double)
	
	예: 게시판 
	
	글 갯수가 37개 있는데, 1page 당 10개씩 출력하려면
	
	37/10 = 몫:3
	37%10 = 나머지:7, 3+1 (총 페이지 수)
	
	
	- 증감연산자
	
	++: 1씩 증가하는 연산자
	--: 1씩 감소하는 연산자
	
	int a=5;
	++a; //전위연산
	a++; //후위연산
	
	(단항 연산자 ++, --: a++ c=a+b)
	단, 증감연산자의 단독 사용은 단일 연산만 진행 (1 만 증가 또는 감소)
	
	그러므로 복합 연산을 할 때는 전위연산, 후위연산의 의미가 있다.
	ex) 
	int a=5;
	int b = ++a + a++; //복합연산
		  ③  ①  ②  ④
		 
	①전위연산 >> ②a+a >> ③b에 할당 >> ④후위연산
	
	a 초기화: 5
	++a 계산: 6
	a+a 계산: 6+6 
	b 계산: 6 + 6 = 12 (b 값 연산 후에 a++로 인해 a는 7로 증가, b 출력 값에 영향x)
	b에 결과 할당: 12
		  
	최종 결과값
	a = 7
	b = 12
	
	
관계연산자

	>	: 보다 크다		 a>b  : a가 b보다 크다
	>=  : 크거나 같다	     a>=b : a가 b보다 크거나 같다
	<	: 보다 작다		 a<b  : a가 b보다 작다
	<=  : 작거나 같다	 	 a<=b : a가 b보다 작거나 같다
	==  : 같다			 a==b : a와 b가 같다              = 할당연산(a=10)a
	!=	: 같지 않다		 a!=b : a와 b가 같지 않다
	
	
논리연산자


	일반 논리연산자
	&& (and)	 a&&b     :왼쪽 값이 true 여야 비교연산 진행함 false면 걍 안해버림
	|| (or)		 a||b
	!  (not)	 !a / !b
	
	
	bit 논리연산자
	&(and)
	|(or)
	~(not)
	^(xor) :배타적 or
	
	
shift 연산자 (bit연산=이진 연산)
	<<  : 좌 shift (1bit씩 왼쪽으로 이동, 오른쪽은 0으로 채움. X*2ⁿ 
	>>  : 우 shift (1bit씩 오른쪽으로 이동, 왼쪽은 signbit로 채움. X/2ⁿ     //(제곱 표시는 ㅊ+한자)
	>>> : 1bit씩 오른쪽으로 이동, 왼쪽은 0으로 채운다 X/4ⁿ
	
	
boolean 연산자
	boolean b=true;
	b=!b; // false
	b=!!b; // true
	
	
	
	
	
	
	
	
	
	
	
	
	
	