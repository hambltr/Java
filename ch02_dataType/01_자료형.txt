
자료형

자료형 (data type)

	변수 : 메모리 공간 할당을 받은 후의 이름(명칭)을 부여한다 , 기억장소 이름 = 변수명, ex)205호 강의실
	상수 : 변하지 않는 값을 나타내는 식별자

	int   a  = 100;
	자료형 변수명 = 값;


==============================
      자료형 종류
1. 논리 자료형
2. 정수 자료형
3. 문자형
4. 실수 자료형
5. 무치형
6. 레퍼런스 자료형 (참조 자료형)
==============================


1. 논리 자료형
   boolean  :  1bit로 표현 (True / False)
   
2. 정수 자료형
   byte : 1byte, 숫자(-128 ~ +127), 1문자 표기(A-Z, 아스키 문자(A), 아스키 코드(65))
   char : 2byte, 유니코드 문자 A=65, 아스키 코드로 표현이 가능하여 증감이 가능하다
   short: 2byte, 숫자(-32768 ~ 32767)
   int  : 4byte, 숫자(-2,147,483,648 ~ 2,147,483,647) >> default (기본값)
   long : 8byte, 숫자(-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807)

   
3. 문자형
   char : 2byte 유니코드 ex)'A', 'B' (단, 문자열은 String)
	    //문자형이면서 정수형인 char는 연산이 가능하다.
   
4. 실수 자료형
   float  : 4byte (정밀도 낮음),(정수,지수)
   double : 8byte (정밀도 높음),(정수,지수) >> default (기본값)
   
5. 무치형 
   void(자료형이 없는 것, 반환하지 않음),(메서드 리턴형 : void main)

6. 레퍼런스 자료형(참조 자료형) : heap 영역에 메모리를 할당 = 동적메모리
      클래스 : System, String, Scanner..
      인터페이스 
      배열 
   
   
   
   
   
   
   
   
   
   
   

자료형 (Data Type)

	자료형은 변수가 어떤 종류의 데이터를 저장할 수 있는지를 정의합니다.
	자료형은 프로그램에서 사용되는 데이터의 유형을 나타내며, 데이터의 크기와 형식을 결정합니다.
	자바의 기본 데이터 형식에는 정수형 (int, long), 
	실수형 (float, double), 문자형 (char), 논리형 (boolean) 등이 있습니다.
	사용자 정의 자료형인 클래스와 인터페이스도 자바에서 사용됩니다.


변수 (Variable)

	변수는 데이터를 저장하는 메모리 공간의 이름입니다.
	변수는 프로그램 내에서 값을 저장하고 관리하는 데 사용됩니다.
	변수를 선언하고 초기화하면 해당 변수에 값을 할당할 수 있습니다.
	예를 들어, int age = 30;에서 age는 변수 이름이고, 30은 해당 변수에 저장된 값입니다.


상수(Constant)

	변하지 않는 값을 나타내는 식별자(이름)입니다.
	이러한 값을 상수로 선언하면, 해당 값은 한 번 설정되면 프로그램 실행 중에 변경할 수 없습니다. 

	상수는 코드의 가독성을 높이고, 프로그램에서 중요한 값을 식별하기 위해 사용됩니다. 
	또한, 상수는 값의 변경을 방지하여 프로그램 버그를 줄이는 데 도움이 됩니다.



byte:

	byte 자료형은 8비트 크기를 가지며, -128에서 127까지의 정수 값을 표현할 수 있습니다.
	주로 작은 정수 값을 저장하기 위해 사용됩니다.


short:

	short 자료형은 16비트 크기를 가지며, -32,768에서 32,767까지의 정수 값을 표현할 수 있습니다.
	byte보다 큰 범위의 정수 값을 저장할 때 사용됩니다.


int:

	int 자료형은 32비트 크기를 가지며, 대부분의 정수 계산에 사용됩니다.
	-2,147,483,648에서 2,147,483,647까지의 정수 값을 표현할 수 있습니다.
	자바에서 가장 일반적으로 사용되는 정수 자료형 중 하나입니다.


long:

	long 자료형은 64비트 크기를 가지며, 더 큰 범위의 정수 값을 표현할 때 사용됩니다.
	-9,223,372,036,854,775,808에서 9,223,372,036,854,775,807까지의 정수 값을 표현할 수 있습니다.
	큰 정수 값이나 시간(타임스탬프) 등을 다룰 때 사용됩니다.
	정수 자료형은 연산 및 데이터 저장에 사용되며, 프로그램에서 정수를 다루는 데 중요한 역할을 합니다. 
	알맞은 정수 자료형을 선택하여 메모리를 효율적으로 사용하고 필요한 범위의 정수 값을 표현할 수 있도록 해야 합니다.


heap 영역이란?

	Heap 영역은 자바 프로그래밍에서 중요한 역할을 하며, 
	객체 지향 프로그래밍에서 객체의 생명주기를 관리하고 객체 간의 상호작용을 지원합니다. 
	가비지 컬렉션은 Heap 영역에서 더 이상 사용되지 않는 객체를 정리하여 메모리 누수를 방지하고 
	시스템의 안정성을 유지하는 데 중요한 역할을 합니다.

	"Heap(힙)"은 메모리 관리의 한 부분으로, 동적으로 할당된 객체와 데이터를 저장하는 영역입니다. 
	Heap 영역은 자바 가상 머신 (JVM)에서 관리되며, 다음과 같은 특징을 갖습니다


동적 할당:
 
	Heap 영역은 프로그램 실행 중에 동적으로 할당되는 메모리 영역입니다. 
	이것은 객체와 배열과 같은 데이터 구조를 생성하고 제거하는 데 사용됩니다.

객체 저장: 

	자바에서 모든 객체는 Heap 영역에 저장됩니다. 객체를 생성할 때, 
	해당 객체의 데이터와 메서드가 Heap에 할당됩니다. 
	이러한 객체들은 가비지 컬렉션(Garbage Collection)에 의해 관리되며, 사용되지 않는 객체들은 자동으로 제거됩니다.

공유 가능:
 
	Heap 영역에 저장된 객체는 여러 스레드에서 공유할 수 있습니다. 
	따라서 멀티스레드 환경에서 객체에 안전하게 접근할 수 있도록 동기화 메커니즘을 사용해야 합니다.

크기 조절 가능: 

	Heap 영역의 크기는 JVM의 명령행 옵션을 사용하여 조절할 수 있습니다. 
	이를 통해 애플리케이션의 메모리 요구 사항에 맞게 조정할 수 있습니다.

참조에 의한 접근: 

	Heap 영역에 저장된 객체에는 참조(reference)를 사용하여 접근합니다. 
	객체를 생성하면 해당 객체에 대한 참조가 반환되며, 이를 통해 객체에 접근하고 조작할 수 있습니다.


