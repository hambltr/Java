6. StringTokenizer : 문자열 파싱

메서드들
	nextToken(): 파싱된 문자열을 차례로 반환한다.
	hasMoreTokens(): nextToken() 다음에 Token 잔존 여부 확인	
	countTokens(): Token의 갯수를 return 함
	
	Test06_StringToken.java
	
7. Properties 클래스 사용 (cf:전역변수 = 속성 = 프로퍼티 = property)
	//전역변수 여러개 모아서 사용
	
	Properties 는 말 그대로 속성(변수)를 모아서 하나의 객체로 만들기 위해 제공되는 클래스
	
	이 클래스가 필요한 이유는 프로그램 시작하기 전에 
	여러개의 속성들 중 원하는 속성들을 미리 인식하게 하여
	전반적인 실행환경을 더 신속하게 하기위한 사전 환경 조성에 있다.
	DB 연결에 주로 사용한다.
	
	DRIVER=com.mysql.jdbc.Driver
	URL=jdbc:mysql://localhost:3306/mydb
	USER=root
	PWD=12345
	
	(key) = (value)
	key 값을 통해서 값을 얻는다.
	
	#db.properties
	#빈 줄x, 공백x
	
	메서드들
	put(key,value) : 값을 넣을 때 사용
	getProperty : key에 해당하는 값을 얻을 때 사용 (이 메서드는 많이 사용)
	
	Test07_Properties.java
	
8. Object

	 자바에서는 기본 패키지 java.lang이란 패키지를 제공해 주고 있다 
	 
	 java.lang에 있는 모든 클래스의 수퍼클래스인 
	 Object와 
	 기본 자료형 클래스와 
	 표준 입력 출력을 위한 System클래스 등이 있다 
	 
	 java.lang.Object는 모든 클래스의 최상위 클래스이다 
	 
	 자바의 모든 클래스들은 Object클래스로 부터 상속 받는다 
	 
	 Object 메서드들
	 public boolean equals(Object ob):두 객체비교,  문자열 비교 
	 
	 public boolean hashCode() : 자바 객체를 식별하는 정수 값인 해쉬코드를 반환해 준다 
	 
	 public Class getClass() : 객체의 클래스 이름을 Class형으로 반환해 준다 
	 
	 public String toString() : 객체를 문자열로 반환한다 (16진으로)
	 
	 ※ 스레드(채팅)할 때 사용할 것임
	 public void notify() : 현재 스레드가 일을 다했다는 것을 알려준다. 그러면 다음 대기하고 있더 스레드가 수행된다
	 public void notifyAll() :현재 스레드가 일을 다했다는 것을 모두에게 알려준다.그러면 대기중인 스레드가 수행된다 
	 public void wait() : 현재 스레드를 기다리게 한다 
	 
	 ※ 웹 프로그램 할때는 웹서버 자체에서 스레드를 제공한다 
	 
	 java의 장점: 보안, network, Thread
	 www -> World Wide Web
	 
9. String 클래스

메서드들
	int length() : 문자열 길이 (갯수) 구하기
	equals(Object ob) : 문자열 비교 ( 대소문자 구분o)
	equalsIgnoreCase(Object ob) : 문자열 비교 (단, 대소문자 구분x)
	
	substring(int start): start 위치부터 끝까지 문자열 발췌
	substring(int start, int end): start - end 직전까지 문자열 발췌
	
	concat(String str): 문자열 합치기
	
	replace(char old, char new): old 문자를 new 문자로 치환
	replace(String old, String new): old 문자열을 new 문자열로 치환
	
ex) str.replace("\n","<br>");

	chat charAt(int idx): idx 위치 문자를 반환 

	=====================
	String을 변수처럼 사용할 때
	=====================
	String s1="hello"
	String s2="hello"
	System.out.println(s1==s2); //true 값 반환
	========================================
	String s3="Hello"
	String s4="hello"
	System.out.println(s3==s4); //false 값 반환
	
	String에서 할당할 때 s1 s2 같은 경우는 같은 곳을 참조 : 자바의 특징
	단 s3 s4 같은 경우는 대소문자가 다르므로 다른 곳을 참조
	
	String s5=new String("hello");
	String s6=new String("hello");
	System.out.println(s5==s6); //false 값 반환
	
	이렇게 객체로 생성하면 글자가 동일해도 다른 취급을 받음
	=========================================
	System.out.println(s5.equals(s6)); //true 값 반환
	
	이렇게 equals로 비교한다면, 해당 문자열만 비교하므로 true
	
	==========================================
	Test10_String.java
	
	toLowerCase(): 소문자로 변환하는 메서드
	toUpperCase(): 대문자로 변환하는 메서드
	
	Test11_String.java
		
	Math.random(): 0.0 < x < 1.0
	Random 클래스 : 임의의 값을 발생시켜주는 클래스
	
메서드들
	nextInt(): 임의의 정수 발생 (음수,양수)
	nextInt(int n): 0 ~ n 범위 안에 임의의 정수 발생
	nextInt(10): 0 ~ 10 범위 안에 임의의 정수 발생
	
	nextBoolean()
	nextFloat()
	nextDouble()
	
	Test12_Random.java