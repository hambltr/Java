1. 객체지향 개념

	자바 파일을 만드는 것을 자료 설계라 한다
	Test01.java 이 작업을 자료 설계라 한다. 작은 단위 프로그램 = 모듈
	컴파일하면 Test01.class (레퍼런스 자료형)
	
	Test01 t = new Test01(); //객체생성 후, 생성자 호출
	t : 클래스 변수(레퍼런스 변수 = 참조 변수), 인스턴스, 객체
	
	t.aa();//객체.메서드(); -> 메서드가 호출된다. 제어권이 넘어가고 처리됨
	
2. 객체지향 4대 특성
	
	2-1 캡슐화 : class Test01{내용} => 묶는 것
	
	2-2 상속 	: java는 모든 클래스가 상속으로 이루어짐
			: class Test01 extends 상위클래스 {}
			: class Test01 extends Object {}
			: 		파생클래스		      슈퍼클래스
			:		하위클래스		      상위클래스
			
	
	2-3 다형성 : 오버로드(Overload), 오버라이딩(Overridong)
	
	2-4 추상화 
			: 복잡한 것을 단순하게 하는 것
	   복잡한 것 : 클래스 설계자 입장(자동차 설계, 측정기 설계)
	   		
	       단순화	: 클래스를 사용하는 입장 (자동차 운전, 측정기 사용)

	       
		
다형성(Polymorphism) 이란? 

			: 의미는 하나이지만, 실제 형태는 여러가지가 될 수 있다.
			: 오버로드, 오버라이딩
			
		ex) : 점심을 먹다 (){한식을 먹었다}
			: 점심을 먹다 (){연어를 먹었다}
			: 점심을 먹다 (){오마카세를 먹었다}
			
			: 강남을 가다 (){버스를 탔다}
			: 강남을 가다 (){헬기를 탔다}
			: 강남을 가다 (){텔레포트를 했다}
	
	
	    오버로드 : 하나의 클래스 안에 이름이 같은 메서드가 여러가지 있는 경우
	    	: 매개변수 개수나 자료형으로 구분한다
	    	: 리턴형은 상관 없음
	    	
	    ex) : Math 클래스 참조
	    	: abs(double a)
	    	: abs(float a)
	    	: abs(int a)
	    	: abs(long a)
	    	
	    	
	 오버라이딩 : 상속 받은 메서드 내용을 재정의 하는것
	 		: 메서드 이름, 리턴형, 매개변수가 반드시 일치해야 함
	 		: 접근제한자는 같거나 더 넓은 접근제한자를 사용해야 한다.

	
	 접근제한자 	
	 		: private	: 자신의 클래스 안에서만 접근 가능
	 		: [생략]	 	: 같은 패키지에서 접근 가능
	 		: protected : 패키지가 다르더라도 상속 받는다면 접근 가능
	 		: public	: 패키지가 다르더라도 어디서나 접근 가능
	 		
	 		
			
			
			
	
	
	
	
	
	